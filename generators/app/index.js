/* jshint node: true */
'use strict';
/*
 * This generator sets up the skeleton for a homework assignment
 * written in latex.  Each question is placed in an individual
 * file in "questions/".  The document is generated by the Make
 * utility.
 */
var Generator = require('yeoman-generator');
var path = require('path');
var fs = require('fs');

module.exports = class extends Generator {
    constructor(args, opts) {
        super(args, opts);

        this.highest = this._find_highest_previous_hw_file() || 1;

        // Create the .yo-rc.json file
        this.config.save();
        this.option('base', {
            type: String,
            required: false,
            desc: 'The base string for these numbered assignments.',
            default: 'hw'
        });
        this.argument('homework', {
            type: Number,
            required: false,
            desc: 'The number of the homework assignment (e.g. 1, 2, etc.)',
        });
        this.argument('questions', {
            type: Number,
            required: false,
            desc: 'The number of questions in the homework assignment.'
        });
        this.argument('author', {
            type: String,
            required: false,
            desc: 'The author name to display on the paper.',
            store: true
        });
        this.argument('course', {
            type: String,
            required: false,
            desc: 'The course name to display in the title.',
            store: false,
        });

        this.base_source = path.dirname(this.sourceRoot());
    }

    _find_highest_previous_hw_file() {
        let HW = /hw([0-9]+)/;
        let isHw = (filename) => {
            return filename.match(HW);
        };
        let extractHW = (filename) => {
            return parseInt(filename.match(HW)[1]);
        };
        let getGreaterThan = (x, y) => x > y ? x : y;
        let l = fs.readdirSync(this.destinationRoot());
        let nums = l.filter(isHw).map(extractHW);
        if (nums.length > 0)
            return nums.reduce(getGreaterThan);
        return null;
    }

    _ask_for_int(name, message, adefault) {
        if (this.options[name])
            return;
        return this.prompt([{
            type: 'input',
            name: name,
            message: message,
            default: adefault
        }]).then((answer) => {
            if ((typeof answer[name]) === 'number')
                this.options[name] = answer[name];
            else if ((typeof answer[name]) === 'string')
                this.options[name] = parseInt(answer[name]);
        });
    }

    getHomeworkNumber() {
        return this._ask_for_int(
            'homework',
            'Which homework is this? (Integer)',
            this.highest+1);
    }

    getQuestionNumber() {
        return this._ask_for_int(
            'questions',
            'How many questions are there?',
            5);
    }

    getAuthorName() {
        if (this.options.author)
            return;
        return this.prompt([{
            type: 'input',
            name: 'author',
            message: 'What is your name?',
            store: true
        }]).then((answer) => {
            this.options.author = answer.author;
        });
    }

    getCourseName() {
        if (this.options.course)
            return;
        return this.prompt([{
            type: 'input',
            name: 'course',
            message: 'What is the course?',
            store: true
        }]).then((answer) => {
            this.options.course = answer.course;
        });
    }

    writing() {
        var opts = {
            'base': this.options.base,
            'homework': this.options.homework,
            'questions': this.options.questions,
            'author': this.options.author,
            'course': this.options.course,
        };
        this.log(opts);
        var src = this.options.base + this.options.homework + '/src/';
        var images = this.options.base + this.options.homework + '/images/';
        var dist = this.options.base + this.options.homework + '/dist/';
        this.fs.copyTpl(
            this.templatePath('Makefile.ejs'),
            this.destinationPath(src + 'Makefile'),
            opts
            );
        this.fs.copyTpl(
            this.templatePath('hw.ejs'),
            this.destinationPath(src + this.options.base + this.options.homework + '.tex'),
            opts
            );
        this.fs.copyTpl(
            this.templatePath('blank.ejs'),
            this.destinationPath(src + this.options.base + this.options.homework + '.bib'),
            {'description': '% Citations'}
            );
        this.fs.copyTpl(
            this.templatePath('blank.ejs'),
            this.destinationPath(dist + 'about.txt'),
            {'description': 'The distribution should go here.'}
            );
        this.fs.copy(
            path.join(this.base_source, 'files/convert.py'),
            this.destinationPath(images + 'convert.py')
            );
        this.fs.copy(
            path.join(this.base_source, 'files/Makefile'),
            this.destinationPath(images + 'Makefile')
            );
        this.fs.copy(
            path.join(this.base_source, 'files/homework_title.tex'),
            this.destinationPath(src + 'homework_title.tex')
            );
        for (let i = 1; i <= this.options.questions; i++) {
            this.fs.write(
                this.destinationPath(src + 'questions/question_' + i + '.tex'),
                ''
                );
        }
    }
};
